Obs:Só gerar código depois que eu pedir ou autorizar,sempre entregar os scripts com funções 
completas e funcionais entregar com código completo,limpo,maduro,funcional e com todos os 
possíveis erros e erros silenciosos e problemas corrigidos.

============================================================
       ADM BUILD SYSTEM - V 1.0 - CONSTRUCTION TOOLS
============================================================

## Objetivo
Criar um sistema de construção baseado no modelo do T2 SDE,
mas automatizado com codigo limpo,estável, completo,funcional.
O foco é reprodutibilidade, modularidade e automação completa
em shell puro, com o mínimo de dependências externas e uso do host,
ser capaz de construir bootstrap do zero e daí iniciar a construção 
do sistema linux from scratch e depois beyond linux from scratch
com xorg,kde,gnome,firefox os scripts serão capaz de construir 
qualquer programa é sempre manter o sistema limpo e funcional.

Estrutura de diretórios:
------------------------
/usr/src/adm/scripts/    - todos os scripts principais do sistema
/usr/src/adm/repo/<categoria>/{<programa,hooks,patch>}/      - repositório de pacotes, hooks, patches e metadados (build.pkg)
/usr/src/adm/build/      - diretório temporário de compilação 
/usr/src/adm/logs/       - registros e saídas organizadas por data
/usr/src/adm/bootstrap/  - diretório de bootstrap e imagens finais e stages 1,2,3,4
/usr/src/adm/cache/{sources,packages}/     - sources e pacotes criados
/usr/src/adm/state/    - pacotes instalados e estados
/usr/src/adm/update/<categoria>/<programa/build.pkg     - diretório de updates com versões novas de atualização 
Categorias do repo  É pra ser criado nos diretórios update/ e repo/ com o env.sh



## Scripts Principais (em /usr/src/adm/scripts)

Script ui.sh 
    - Responsável por mostrar um painel configurável bonito no lugar da saída de log completo na tela
    - Com cores e sppiners e porcentagem para toda a construção e download e todo o sistema adm
    - Com o cabeçalho com o nome do programa de construção e versão 
    - Em etapas mostrar o nome do programa com a versão quantidade de cpu,memória,load average
    - Integração com todos os scripts

1. Env
   - Lê e aplica configurações globais do sistema.
   - Define variáveis globais ao sistema para ser usado pelo bootstrap e sistema.
   - Define perfis para construção como agressive, padrão, simples (definidos com comando set)
   - Carrega funções auxiliares de configuração.
   - Confere e cria toda a estrutura de diretórios necessária para o sistema com as devidas permissões 
   - Poder ser chamada várias vezes sem problemas ao sistema.

2. Bootstrap
   - Inicializa o ambiente de build.
   - Cria diretórios em /usr/src/adm/bootstrap.
   - Testa ferramentas essenciais (bash, tar, make, gcc).
   - Prepara variáveis para a arquitetura local.
   - Gera o primeiro toolchain stage0 com rootfs.
   - Cria chroot cria tudo que é preciso pra construir os stages corretamente arquivos,diretórios
   - Depois segue criando toolchain stage1,stage2,stage3 com rootfs de cada stage.
   - Nas atualizações quando detectado toolchain o bootstrap deve gerenciar,construir, manter.

3. Check-Deps
   - Verifica dependências do ambiente (gcc, make, bison, flex, etc).
   - Garante que o sistema host tem o necessário para construir o bootstrap.
   - Checa dependências do sistema e garante que o sistema tem o necessário para construir.
   - Checa se todas as variáveis estão carregadas e se o perfil de construção está correto.
   - Checa e mostra se o sistema está pronto pra construção de qualquer programa.
   - Pode ser chamado antes de iniciar qualquer build.

4. PkgQueue
   - Gera a lista ordenada de pacotes a serem construídos.
   - Lê todos os build.pkg e ordena conforme STAGE e dependências.
   - Se é cross se tem múltiplas arquiteturas — assume target == host.
   - Salva a ordem de build em /usr/src/adm/state/pkgqueue.list.
   - Garante ordem correta na fila.

5. FetchPkg
   - Lê o URL no build.pkg faz múltiplos downloads em todos os formatos,git,https,FTP,rsync dos sources para o cache.
   - Checa multiplos sha256sum e confere com o do build.pkg se ok procegue se não baixa novamente.
   - Extrai em todos os formatos para o diretório de trabalho.

6. PatchPkg
   - Aplica patches em níveis p0,p1,p2 

7. HookPkg
   - Aplica hooks em todos os estágios pre/post e uninstall também 

8. Install-Pkg
   - Instala binários gerados ou converte binários deb,rpm em pacote para instalar.
   - Resolve ordem de dependências dos binários se não tiver chamar Emerge-Pkg
   - Com comando para definir diretório final.
   - Salva registro de programa instalado.

9. Create-Pkg
   - Cria arquivo binário tar.zst ou tar.xz com .pkg.tar
   - Strip e guardar em cache


10. Build-Pkg
   - Função principal de construção.
   - Lê o build.pkg do pacote.
   - Executa:
     1. FetchPkg → baixa e valida o source e extrai para diretório de trabalho
     3. PatchPkg → aplica patches encontrados em /usr/src/adm/repo/<categoria>/<programa/patch/
     4. HookPkg   prepare → hooks pré-configuração.
     5. compile → executa build conforme BUILD_HINT.
     6. install → instala em diretório temporário DESTDIR.
     7. Create-Pkg → cria arquivo binário .pkg.tar.
     8. register → grava em state/installed.list.
     9. Install-Pkg  instalação final 
   - Log completo em /usr/src/adm/log/<pkg>.log.

11. Emerge-Pkg
   - Controla a construção em lote de pacotes.
   - Lê pkgqueue.list e chama Build-Pkg para cada pacote em ordem.
   - Detecta falhas e pausa a fila.
   - Permite retomar o processo do ponto onde parou.
   - Usar os profiles e Otimizar ao máximo 

12. Update-Pkg
   - Atualiza um pacote específico:
     - Lê o build.pkg em URL e busca no upstream nova versão estável.
     - Cria build.pkg atualizado em /usr/src/adm/update/<categoria>/<programa/build.pkg
     - Detectar toolchain e chamar bootstrap para atualizar,gerenciar.
     - Comando para Recompila e substitui binário removendo o antigo.
     - Lê build.pkg mantém dependências originais,mas possibilitando atualizar cada uma das dependências também 
   - Log em /usr/src/adm/log/update-<pkg>.log.

13. Cleanup
   - Remove diretórios temporários antigos.
   - Limpa caches inválidos e logs muito antigos.
   - Mantém apenas últimos builds bem-sucedidos.

14. Verify-Pkg
   - Verifica integridade de instalação completa se tem libs faltando,quebrada,links,permissões.
   - Recalcula checksums e compara com manifest.
   - Valida presença de dependências.
   - Reporta divergências ou arquivos ausentes.
   - Verifica permissões em diretório,arquivos e concerta.

15. DiffPkg
   - Responsável por criar,compara,editar,aplicar diff 
   - Opção de criar diff no diretório específico já com as modificações.
   - Tanto manual como pro sistema.

16. Mkinitramfs
   - Cria mkinitramfs,initramfs completo para o stage com kernel

17. adm
   - Executável (cli) responsável por chamar todos na ordem correta com comandos.
   - Comandos com abreviações e comandos de baixo nível para manutenção dry-run para todos 
   - Comandos para procurar programa, informações completas do programa 
   - Comandos para mudar profiles,ver o profile ativo e já ativar na hora
   - Comandos para ver todos os logs ou log específico 
   - Comando para entrar no chroot com segurança e sair com segurança 
   - Comandos para manipular diff
   - Comandos para limpeza 
   - Um menu TUI
   - Helper com todos os comandos
   - Bash,zsh,fish completions já instalado 


## Estrutura de Pacote (build.pkg)

Exemplo: /usr/src/adm/repo/base/bc/build.pkg

DESC=Programa de linha de comando no Linux que funciona como uma calculadora.
NAME=bc
VERSION=1.08.2
BUILD=1
URL=https://ftp.gnu.org/$NAME/bc/$NAME-$VERSION.tar.xz
SHA256=76e3a9531c7764bd13c600c1e016e6760d9b8379ba06d1ecc08d5a68
BUILD_DEPS=readline
RUN_DEPS=
BUILD_HINT=autotools,(todos os compiladores),custom 
STAGE=1


custom_build()
{essa função só aparece quando custom está selecionado em BUILD_HINT}

--------------------------

## Hooks

Cada pacote pode conter um diretório hooks/ com scripts:

pre-prepare
post-prepare
pre-compile
post-compile
pre-install
post-install
pre-uninstall
post-uninstall

Executados automaticamente pelo Build-Pkg nas etapas correspondentes.


## Patches

Diretório: /usr/src/adm/repo/<categoria>/<pacote>/patches/
Arquivos aplicados automaticamente antes da compilação,
em ordem numérica (001-*, 002-*, ...).


## Fluxo de Construção

 env garante que todas as variáveis estejam carregadas corretamente
1. bootstrap → prepara ambiente
2. PkgQueue → gera lista ordenada
3. Emerge-Pkg → organiza a construção de todos os pacotes em sequência
4. Build-Pkg → orquestra toda a construção do programa
5. Update-Pkg → atualiza versões quando necessário
6. Cleanup → Limpa o sistema
7. Verify-Pkg → valida integridade final


## Resultado

- Sistema totalmente shell puro, modular, previsível, limpo, e autoconstrutivo
- Capaz de construir sistemas completos (LFS, BLFS, KDE, GNOME, Firefox, qualquer tipo de programa)
- Reprodutível e fácil de depurar
- Mantém a filosofia kiss,leve, limpo, simples e direto
- Dependências resolvidas antes da construção do programa ou instalação de binários 
- Fonte e build sempre controlados pelo build.pkg
- Todos os logs e caches ficam em /usr/src/adm
- Nenhum script depende de sistema de build externo

# Fim do Roadmap
